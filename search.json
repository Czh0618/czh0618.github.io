[{"title":"Java 开发中的性能优化技巧","url":"/2025/06/16/java-performance-optimization/","content":"\n# Java 开发中的性能优化技巧\n\n在 Java 开发过程中，性能优化是一个永恒的话题。今天我来分享一些实用的性能优化技巧，这些技巧在实际项目中都经过验证。\n\n<!-- more -->\n\n## 1. 合理使用集合框架\n\n### ArrayList vs LinkedList\n\n```java\n// 频繁随机访问时使用 ArrayList\nList<String> arrayList = new ArrayList<>();\n\n// 频繁插入删除时使用 LinkedList\nList<String> linkedList = new LinkedList<>();\n```\n\n### HashMap 初始容量设置\n\n```java\n// 避免频繁扩容，预设合理的初始容量\nMap<String, Object> map = new HashMap<>(16);\n\n// 如果知道大概数据量，可以这样计算\nint expectedSize = 1000;\nMap<String, Object> optimizedMap = new HashMap<>(expectedSize / 0.75f + 1);\n```\n\n## 2. 字符串操作优化\n\n### 使用 StringBuilder\n\n```java\n// 避免这样做\nString result = \"\";\nfor (int i = 0; i < 1000; i++) {\n    result += \"item\" + i;\n}\n\n// 推荐这样做\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < 1000; i++) {\n    sb.append(\"item\").append(i);\n}\nString result = sb.toString();\n```\n\n### 字符串常量池\n\n```java\n// 使用字符串常量池\nString s1 = \"hello\";\n\n// 避免不必要的 new String()\nString s2 = new String(\"hello\"); // 不推荐\n```\n\n## 3. 对象创建优化\n\n### 对象重用\n\n```java\n// 重用 SimpleDateFormat\nprivate static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = \n    ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyy-MM-dd\"));\n\npublic String formatDate(Date date) {\n    return DATE_FORMAT.get().format(date);\n}\n```\n\n### 避免在循环中创建对象\n\n```java\n// 避免这样做\nfor (int i = 0; i < 10000; i++) {\n    String temp = new String(\"temp\");\n    // do something\n}\n\n// 推荐这样做\nString temp = \"temp\";\nfor (int i = 0; i < 10000; i++) {\n    // do something with temp\n}\n```\n\n## 4. 数据库操作优化\n\n### 批量操作\n\n```java\n// 使用批量插入\nString sql = \"INSERT INTO user (name, email) VALUES (?, ?)\";\ntry (PreparedStatement ps = connection.prepareStatement(sql)) {\n    for (User user : users) {\n        ps.setString(1, user.getName());\n        ps.setString(2, user.getEmail());\n        ps.addBatch();\n    }\n    ps.executeBatch();\n}\n```\n\n### 连接池配置\n\n```yaml\n# application.yml\nspring:\n  datasource:\n    hikari:\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 30000\n      idle-timeout: 600000\n      max-lifetime: 1800000\n```\n\n## 5. JVM 参数调优\n\n### 堆内存设置\n\n```bash\n# 设置堆内存大小\n-Xms2g -Xmx2g\n\n# 设置新生代比例\n-XX:NewRatio=3\n\n# 启用 G1GC\n-XX:+UseG1GC\n-XX:MaxGCPauseMillis=200\n```\n\n### 监控和诊断\n\n```bash\n# 启用 GC 日志\n-XX:+PrintGC\n-XX:+PrintGCDetails\n-XX:+PrintGCTimeStamps\n\n# 开启远程监控\n-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=9999\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false\n```\n\n## 6. 缓存策略\n\n### 本地缓存\n\n```java\n@Component\npublic class CacheService {\n    \n    private final Cache<String, Object> cache = Caffeine.newBuilder()\n            .maximumSize(10000)\n            .expireAfterWrite(Duration.ofMinutes(5))\n            .build();\n    \n    public Object get(String key) {\n        return cache.getIfPresent(key);\n    }\n    \n    public void put(String key, Object value) {\n        cache.put(key, value);\n    }\n}\n```\n\n### Redis 缓存\n\n```java\n@Service\npublic class UserService {\n    \n    @Cacheable(value = \"users\", key = \"#id\")\n    public User getUserById(Long id) {\n        return userRepository.findById(id);\n    }\n    \n    @CacheEvict(value = \"users\", key = \"#user.id\")\n    public void updateUser(User user) {\n        userRepository.save(user);\n    }\n}\n```\n\n## 总结\n\n性能优化是一个持续的过程，需要：\n\n1. **测量先行**: 使用性能分析工具定位瓶颈\n2. **合理优化**: 针对真正的性能瓶颈进行优化\n3. **权衡取舍**: 在代码可读性和性能之间找到平衡\n4. **持续监控**: 在生产环境中持续监控性能指标\n\n记住：\"过早的优化是万恶之源\"，但合理的优化能显著提升用户体验。\n\n---\n\n> 如果这篇文章对你有帮助，欢迎点赞和分享！有任何问题也欢迎在评论区讨论。\n","tags":["Java","性能优化","编程技巧"],"categories":["技术分享"]},{"title":"性能指标详解","url":"/2024/04/04/performance-index/","content":"\n### 简述\n```\n在开发测试网站时，一般都有几个指标来衡量系统的性能，其中吞吐量、并发数、QPS、TPS、有效吞吐量、吞吐率、网络流量等指标，接下来就这几种指标简单聊聊。\n```\n\n#### 吞吐量\n\n* 引用维基百科的概念解释\n\n![alt text](../img/performance/image.png)\n\n* Web系统\n```\n在web系统中，吞吐量指单位时间内成功处理的请求数量，反应了系统的整体性能，高吞吐量意味着用户的体验更好，请求可以被更快速的处理和响应。\n```\n* AI大模型训练\n\n```\n在大模型训练中，吞吐量指单位时间内可以处理多少个训练步骤或样本，\n```\n* 数据库\n\n```\n在数据库这样的存储系统中，吞吐量指可以接受和写入存储的数据量或读取并返回到请求系统中的数据量，通常以每秒字节数(Bps)为单位。\n```\n* JVM\n\n```\nJava JVM中的Parallel Scavenge垃圾收集器，重点是关注的吞吐量，逻辑为：运行用户代码时间/(运行用户代码时间+运行垃圾收集时间)\n```\n\n* 吞吐量和什么有关\n```\n吞吐量一般和网络带宽有关，但是吞吐量必然低于带宽，最主要的还是和系统的性能有很大关系，一般低延迟的系统吞吐量必然也不低。\n```\n* 如何测试吞吐量\n\n```\n可以采用网络工具来检测，比如简单网络管理协议 （SNMP）、Windows Management Instrumentation （WMI）、tcpdump、Wireshark 等\n```\n* 参考\n\n[1.TeachTarget throughput](https://www.techtarget.com/searchnetworking/definition/throughput)\n\n[2.性能测试中吞吐量](https://aiops.com/news/post/33883.html)","tags":["性能","指标","性能测试"],"categories":["技术分享"]},{"title":"IntelliJ IDEA 插件推荐指南","url":"/2023/05/16/ideaPlugin/","content":"\n### 下面主要是汇总一下自己使用的idea插件，这里只是罗列以及简介\n\n<!-- more -->\n\n#### AI\n\n- GitHub Copilot\n\n```\ngithub的代码辅助工具，可以根据注释或上下文自动生成代码，目前支持了Agent代理模式，但是不太好用，目前还是主要使用Tab模式\n```\n\n#### 工具\n\n- Auto filling Java call arguments\n\n```\n功能：调用函数时，alt+enter自动填充函数的形参\n```\n\n- Alibaba Java Coding Guidelines\n\n```\n以阿里巴巴的Java代码规范校验，会自动检测代码不规范的地方\n```\n\n- CamelCase\n\n```\n在 kebab-case、SNAKE_CASE、PascalCase、camelCase、snake_case 或 space case 之间轻松切换。请参阅编辑菜单或使用 ⇧ + ⌥ + U / Shift + Alt + U。允许禁用某些转换或在首选项中更改它们的顺序。\n```\n\n- jclasslib is a bytecode viewer\n\n```\n生成Java字节码文件\n```\n\n- Key Promoter X\n\n```\n自动提示功能对应的快捷键\n```\n\n- Maven Helper\n\n```\n方便的管理maven依赖，尤其是分析依赖注入冲突\n```\n\n- Rainbow Brackets\n\n```\n彩虹括号\n```\n\n- RestfulTookit-fix\n\n```\nrestFul接口查找\n```\n\n- Swith2Cursor\n\n```\n支持在cursor开发工具里打开当前的项目，从而使用Agent功能\n```\n\n- POJO to JSON\n  \n```\n将POJO转换成JSON，适合跟前端对接数据结构\n```\n\n#### 学习\n\n- LeetCode Editor\n\n```\n同步并管理leetCode的问题\n```\n\n- PDF Viewer\n\n```\n阅读PDF文件的插件，但是不能管理，没有页签\n```\n\n- MetricsReload\n\n```\n分析代码复杂度，ps:没用过\n```","tags":["idea","plugin","工具推荐","开发效率"],"categories":["工具"]},{"title":"2023年度读书清单","url":"/2023/05/07/2023Book/","content":"\n### 已读书单\n#### 技术\n\n```\n《网络是怎样链接的》[日] 户根勤\n《Scrum精髓》Kenneth Rubin\n《计算机是怎样跑起来的》[日] 矢泽久雄\n```\n\n#### 文学\n\n```\n《枪炮、病菌与钢铁》[美] 贾雷德·戴蒙德\n《阿Q正传》鲁迅\n```\n\n#### 理财\n\n```\n《纳瓦尔宝典》[美] 埃里克·乔根森\n```\n\n#### 历史\n\n```\n《挑战古人100天》云葭\n```\n\n#### 工具\n\n#### 其他\n\n```\n《一个广告人的自白》[美] 大卫·奥格威\n```\n","tags":["2023","读书笔记","技术书籍"],"categories":["读书"]},{"title":"Hexo 博客搭建指南","url":"/2022/11/20/hexo-setting/","content":"\n\n上一篇已经描述过了博客的技术选型，接下来就让我们来具体详解一下hexo的搭建之旅吧！\n#### 主题选择\nhexo支持丰富的主体插件选择，具体可以参考[这里](https://hexo.io/themes/index.html),也可以在GitHub上寻找相关主题(搜索hexo-theme)，这里我采用的是[Next](https://theme-next.iissnan.com/)主题,github地址为`https://github.com/iissnan/hexo-theme-next/`，这个主题的受欢迎程度也是很高的，相较而言更简洁，当然也可以做自己的主题，不过这都是后话了，现在遵循拿来即用的原则。\n\n#### 开放评论\n这里主要还是基于第三方的评论系统，目前Next主题支持的有：\n- [disqus](https://disqus.com/)\n    > 目前是很好用的一个评论系统，但是由于是墙外的应用，对于国内常规用户来说还是不太友好，暂时忍痛割爱了,不过可以看下效果图\n    ![](../img/hexo/b58881c0039f94ad26162a407723f701.png)\n- [changyan](https://changyan.kuaizhan.com/)\n    > 这是一个国内的平台,不知道为何，现在国内的好多应用都需要关注公众号，so不是太喜欢，贴个效果图感受一下\n    ![](../img/hexo/C6E72794-EED6-4E70-955E-D542DE228C7E.png)\n- [valine](https://www.leancloud.cn/)\n    > valine是基于leanCloud的无后端评论系统，所以：\n\n    ``` txt\n    注册LeanCode账号\n    创建Valine应用\n    进入应用，点击设置>应用Keys获取appId,appKey\n    在主题配置文件_config.yml,这里的路径是next/_config.yml中找到valine然后配置上即可\n    ```\n    - 优化\n        - 主要是优化valine在博客中的一些样式，比如去处掉Powered By，文本等，具体可以在主题的css目录下创建一个comment文件夹，放自己的自定义的样式，我这里是next/source/css/_common下创建comment文件夹，再创建comment.styl样式文件，里面写优化的样式，写完之后要在main.styl引入才可生效\n        - 可以在主题中开启评论邮箱通知，自定义placeholder等\n    \n- gitalk\n    首先要注册GitHub应用，https://github.com/settings/applications/new\n    注册完成之后，把Client ID和Client secrets填写到主题的_config.yml里面，gittalk对应的位置，开启即可\n\n    ``` txt\n    gitalk:\n        enable: true  #启用gitalk\n        github_id:   #github帐号 例：CodeHaotian\n        id: location.pathname  #此设置参照下文常见问题说明\n        repo:   #存放评论的仓库名称\n        client_id:   #application的id，即上文Client ID\n        client_secret:  #application的密码，即上文Client Secret\n        admin_user:  #页面显示联系**初始化评论 例：CodeHaotian\n        distraction_free_mode: true # Facebook-like distraction free mode\n        # Gitalk's display language depends on user's browser or system environment\n        # If you want everyone visiting your site to see a uniform language, you can set a force language value\n        # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n        language: zh-CN\n    ```\n- [livere](https://livere.com/introduce)\n    > 来必力，一家韩国的评论系统，这里不多做阐述了，感兴趣的大家可以去看看，不过不是太推荐\n- [rating](https://widgetpack.com/)\n\n#### 统计字数\n使用hexo-word-counter统计文章的字数以及预期阅读时间。完成配置后，可以在每篇文章开头和页面底部显示字数和阅读时间\n- 安装\n\n``` bin\n$ npm install hexo-word-counter\n$ hexo clean\n```\n- 配置\n在主配置文件_config.yml尾部添加\n\n``` json\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 4  # 平均字节长度，默认为4，cn≈2，en≈5，\n  wpm: 275 # 每分钟阅读次数，默认为275，Slow≈200，Normal≈275，Fast≈350\n  suffix: \"mins.\"\n```\n\n#### 站点运行时间\n打开`\\themes\\next\\layout\\_partial\\footer.swig`,在最后位置添加一串js代码\n\n``` js\n<div>\n<span id=\"timeDate\">载入天数...</span><span id=\"times\">载入时分秒...</span>\n<script>\n    var now = new Date(); \n    function createtime() { \n        var grt= new Date(\"2020/11/09 00:00:00\");//在此处修改你的建站时间\n        now.setTime(now.getTime()+250); \n        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); \n        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); \n        if(String(hnum).length ==1 ){hnum = \"0\" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); \n        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \"0\" + mnum;} \n        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); \n        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \"0\" + snum;} \n        document.getElementById(\"timeDate\").innerHTML = \"已运行 \"+dnum+\" 天 \"; \n        document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\"; \n    } \nsetInterval(\"createtime()\",250);\n</script>\n</div>\n```\n\n#### 总访问人数\nNext主题默认支持,修改/theme/next/_config.yml中的busuanzi_count，改为true即可.`这个只是很普通的显示总站的访问量和人数`\n\n#### 推荐文章\n这里使用的是第三方的一款插件，具体预览效果可以看：\n![recommend](../img/hexo/20221214153329.jpg)\n\n- 安装插件\n``` bash\nnpm install hexo-recommended-posts --save\n```\n- 下载推荐文章列表\n在编辑完新的文章之后，使用如下命令获取推荐列表\n``` bash\nhexo recommend\n```\n- 自定义\n如果默认配置不满足需求，可以在hexo的根目录`_config.yml`里添加配置：\n``` json\nrecommended_posts:\n  server: https://api.truelaurel.com #后端推荐服务器地址\n  timeoutInMillis: 10000 #服务时长，超过此时长，则使用离线推荐模式\n  internalLinks: 2 #内部文章数量\n  externalLinks: 1 #外部文章数量\n  fixedNumber: false\n  autoDisplay: true #自动在文章底部显示推荐文章\n  excludePattern: []\n  titleHtml: <h1>猜你喜欢<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></h1> #自定义标题\n```\n其中 `excludePattern` 可以添加想要被过滤的链接的正则表达式, 如配置为 `[\"example.com\"]`, 则所有包含 `example.com` 的链接都会从推荐文章中过滤掉.\n\n`fixedNumber` 字段用来控制是否返回固定数量的推荐文章, 如果默认推荐文章不够的话会填充当前文章的前后文章作为推荐文章.\n#### 阅读进度\n找到next主题的`_config.yml`找到`reading_progress`,把false改为true即可，默认是支持的\n\n#### 文章简介\n目前hexo不再支持老的auto_excerpt，所以现在我们引入新的插件\n- hexo-excerpt\n    - 安装\n        ``` bash\n        npm install hexo-excerpt --save\n        ```\n        打开hexo根目录的`_config.yml`添加如下配置\n        ``` json\n        excerpt:\n            depth: 2  #按层来算，也就是按代码块来算\n            excerpt_excludes: []\n            more_excludes: []\n            hideWholePostExcerpts: true\n        ```\n        打开主题的配置文件`/theme/next/_config.yml`,将`excerpt_description`设置为`true`,`read_more_btn`设置为`true`\n        注：按代码块的显示可能有些不太友好，所以下面我们引入第二个插件\n- hexo-auto-excerpt\n    - 安装\n        ``` bash\n        npm install hexo-auto-excerpt --save\n        ```\n        安装完成后在hexo的根目录`_config.yml`下添加`excerpt_length: 100`即可，表示摘要的字数\n        注：这个会把文本块打乱，只是以文字显示在首页\n#### 性能优化\n待定\n\n#### 域名设置\n域名可以在[freenom.com](http://www.freenom.com/)上面注册一个免费的`前提需要有梯子`,然后可以搜索自己的想要的域名，最高可以免费12个月哦，添加完之后有个配置forward url可以设置自己的GitHub page域名，这样访问注册的域名就可以跳转到GitHub page访问博客了。\n\n#### SEO搜索\n- Google Search\n登录[谷歌站点](https://developers.google.com/search)，添加自己的站点域名，然后选择TXT验证，完毕之后，添加个人站点地图\n","tags":["hexo","博客搭建","技术分享"],"categories":["工具"]},{"title":"我的博客搭建之旅","url":"/2022/11/20/My-Blog-Journey/","content":"\n\n其实我萌生搭建自己的博客这个念头已经很久了，最初是在2018年的时候就有了，那会儿看了一个hexo搭建博客的例子就开始弄自己的blog,不过仅仅只是浅浅的照猫画虎了一番，是在自己的GitHub上搭建了一个demo，仅此而已，然后就是到了现在，才又把这个重新捡了起来(在此为我之前的半途而废而感惭愧:joy:)\n\n咳咳，往事翻篇，现在我要认真的重新搞起我的blog啦！从零开始~\n\n其实个人搭建博客的技术选型我在WordPress和Hexo之间有过徘徊，下面简单汇总了这两种方式搭建博客各自的特点。\n\n#### WordPress\n\nWordPress(简称WP)是用PHP语言开发的一款免费开源的博客平台，目前是全球最流行的博客系统了，世界上约有43% 的网站都在使用WordPress，小到兴趣博客，大到新闻网站。so它也可以是一个CMS作为你的内容站。\n\n特性：\n- 功能强大、扩展性强插件众多\n- 对SEO搜索引擎友好，收录快，排名靠前\n- 主题众多\n- 写东西方便，任意一台电脑、手机即可\n\n具体的搭建步骤如下：\n- 注册自己的WordPress账号\n- 注册域名(国内有[阿里云(万网)](https://wanwang.aliyun.com/domain)、[新网](https://www.xinnet.com/)、[聚名网](https://www.juming.com/)、[江苏邦宁(中数)](https://www.com.top/)、[Namesilo](https://www.namesilo.com/?rid=d27fa32do)等)\n- 创建VPS(需要购买)\n- 域名解析\n- 连接VPS\n- 搭建WordPress\n- 主题、插件等配置\n\n#### Hexo\nHexo是基于node.js git搭建的，所以需要有一定的极客属性，可以直接在GitHub pages平台上托管。\n\n特性：\n- 快速、简洁\n- 支持MarkDown，后期也好迁移\n- DIY每个人都可以定义自己的blog\n\n步骤：\n- 本地搭建环境:\n    - 安装并配置node.js>[Win](https://zhuanlan.zhihu.com/p/506609305)\n    - 安装git>[Win](https://cloud.tencent.com/developer/article/2134190)\n    `Mac上推荐使用HomeBrew来安装管理`\n\n- 注册GitHub账号，并创建自己的`xxx.github.io`\n    - 创建仓库，并命名为`xxx.github.io` \n    ![github](../img/myBlogJourney/github_create_repository.png)\n    - 设置pages，按提示操作即可\n    ![pages](../img/myBlogJourney/github_pages.png)\n- hexo操作\n    - 安装hexo, **npm install -g hexo** `如果是国内的话可以设置npm镜像源为https://npmmirror.com/`\n    - hexo初始化文章\n    - hexo 绑定GitHub\n    ``` txt\n    在_config.xml下设置deploy为GitHub，repo为你自己的仓库地址\n    ```\n    - 选择主题\n    - 开放评论\n    - 博客统计次数\n    - 站点运行时间\n    - 设置推荐文章\n    - 博客字数统计\n    - 文章阅读进度\n    - 文章简介\n    - 性能优化\n    - 域名设置\n    - SEO搜索设置\n    \n\n但是综合考虑(主要是成本)之后选择了Hexo,毕竟身为一个技(穷)术宅(人)，还是选择免费的Hexo可玩儿性比较高，哈哈。\n\n\n","tags":["blog","个人成长","技术选型"],"categories":["个人"]},{"title":"v2ray","url":"/2022/11/14/v2Ray/","content":"\n### v2ray使用\n#### 简介\n\n官网：https://www.v2ray.com\nv2Ray（Project V）相对于Shadowsocks,支持更多协议 (Socks、HTTP、TLS、TCP、mKCP、WebSocket)，还有更为强大的路由功能，更像是个全能选手\n\n#### 服务器(VPS)购买\n\n这里我采用的是HostWinds，之前有选择购买搬瓦工，但是IP更换没有hostWinds方便，地址：https://clients.hostwinds.com/\n\n当然，搬瓦工官方也出了自己搭建的v2Ray [Just My Socks](https://bwgjms.com/post/how-to-buy-justmysocks/)\n\n#### 安装\n\n输入下面的命令，然后按步骤操作\n\n``` bash\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n\n安装完成后，可以输入: v2Ray url 查看客户端需要配置的链接\n\n#### BBR优化\n\n#### 备注\n\n当前使用的配置来自于：https://github.com/233boy/v2ray","tags":["bridge","梯子"],"categories":["v2Ray"]},{"title":"My Book","url":"/2022/11/09/myBook/","content":"### 2022已读书单\n#### 技术\n\n``` book\n《MySQL是怎样运行的》小孩子 4919\n```\n\n#### 文学\n\n``` book\n《闪闪发光的人生》 [日]小川糸\n《山茶文具店》[日] 小川糸\n《人生十讲》 季羡林\n```\n    \n#### 理财\n\n``` book\n《小狗钱钱》[德]博多·舍费尔\n```\n\n\n#### 地理\n\n``` book\n《这里是中国》星球研究所\n《这里是中国2》星球研究所\n```\n    \n#### 心理\n\n``` book\n《被讨厌的勇气》岸见一郎\n```\n\n#### 历史\n\n``` book\n《古代人的日常生活》讲历史的王老师\n```\n\n#### 工具\n\n``` book\n《如何阅读一本书》[美] 莫提默·J. 艾德勒 / 查尔斯·范多伦\n```\n\n#### 健康\n\n``` book\n《癌症·真相》菠萝\n```\n\n#### 其他\n\n``` book\n《凡人修仙传》忘语\n《躺平》[德] 贝恩德·布伦纳\n```","tags":["2022"],"categories":["读书"]}]
<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 开发中的性能优化技巧</title>
    <url>/2025/06/16/java-performance-optimization/</url>
    <content><![CDATA[Java 开发中的性能优化技巧在 Java 开发过程中，性能优化是一个永恒的话题。今天我来分享一些实用的性能优化技巧，这些技巧在实际项目中都经过验证。


1. 合理使用集合框架ArrayList vs LinkedList// 频繁随机访问时使用 ArrayList
List&lt;String> arrayList = new ArrayList&lt;>();

// 频繁插入删除时使用 LinkedList
List&lt;String> linkedList = new LinkedList&lt;>();

HashMap 初始容量设置// 避免频繁扩容，预设合理的初始容量
Map&lt;String, Object> map = new HashMap&lt;>(16);

// 如果知道大概数据量，可以这样计算
int expectedSize = 1000;
Map&lt;String, Object> optimizedMap = new HashMap&lt;>(expectedSize / 0.75f + 1);

2. 字符串操作优化使用 StringBuilder// 避免这样做
String result = "";
for (int i = 0; i &lt; 1000; i++) &#123;
    result += "item" + i;
&#125;

// 推荐这样做
StringBuilder sb = new StringBuilder();
for (int i = 0; i &lt; 1000; i++) &#123;
    sb.append("item").append(i);
&#125;
String result = sb.toString();

字符串常量池// 使用字符串常量池
String s1 = "hello";

// 避免不必要的 new String()
String s2 = new String("hello"); // 不推荐

3. 对象创建优化对象重用// 重用 SimpleDateFormat
private static final ThreadLocal&lt;SimpleDateFormat> DATE_FORMAT = 
    ThreadLocal.withInitial(() -> new SimpleDateFormat("yyyy-MM-dd"));

public String formatDate(Date date) &#123;
    return DATE_FORMAT.get().format(date);
&#125;

避免在循环中创建对象// 避免这样做
for (int i = 0; i &lt; 10000; i++) &#123;
    String temp = new String("temp");
    // do something
&#125;

// 推荐这样做
String temp = "temp";
for (int i = 0; i &lt; 10000; i++) &#123;
    // do something with temp
&#125;

4. 数据库操作优化批量操作// 使用批量插入
String sql = "INSERT INTO user (name, email) VALUES (?, ?)";
try (PreparedStatement ps = connection.prepareStatement(sql)) &#123;
    for (User user : users) &#123;
        ps.setString(1, user.getName());
        ps.setString(2, user.getEmail());
        ps.addBatch();
    &#125;
    ps.executeBatch();
&#125;

连接池配置# application.yml
spring:
  datasource:
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

5. JVM 参数调优堆内存设置# 设置堆内存大小
-Xms2g -Xmx2g

# 设置新生代比例
-XX:NewRatio=3

# 启用 G1GC
-XX:+UseG1GC
-XX:MaxGCPauseMillis=200

监控和诊断# 启用 GC 日志
-XX:+PrintGC
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps

# 开启远程监控
-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=9999
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false

6. 缓存策略本地缓存@Component
public class CacheService &#123;
    
    private final Cache&lt;String, Object> cache = Caffeine.newBuilder()
            .maximumSize(10000)
            .expireAfterWrite(Duration.ofMinutes(5))
            .build();
    
    public Object get(String key) &#123;
        return cache.getIfPresent(key);
    &#125;
    
    public void put(String key, Object value) &#123;
        cache.put(key, value);
    &#125;
&#125;

Redis 缓存@Service
public class UserService &#123;
    
    @Cacheable(value = "users", key = "#id")
    public User getUserById(Long id) &#123;
        return userRepository.findById(id);
    &#125;
    
    @CacheEvict(value = "users", key = "#user.id")
    public void updateUser(User user) &#123;
        userRepository.save(user);
    &#125;
&#125;

总结性能优化是一个持续的过程，需要：

测量先行: 使用性能分析工具定位瓶颈
合理优化: 针对真正的性能瓶颈进行优化
权衡取舍: 在代码可读性和性能之间找到平衡
持续监控: 在生产环境中持续监控性能指标

记住：”过早的优化是万恶之源”，但合理的优化能显著提升用户体验。


如果这篇文章对你有帮助，欢迎点赞和分享！有任何问题也欢迎在评论区讨论。

]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>性能优化</tag>
        <tag>编程技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 插件推荐指南</title>
    <url>/2023/05/16/ideaPlugin/</url>
    <content><![CDATA[下面主要是汇总一下自己使用的idea插件，这里只是罗列以及简介

AI
GitHub Copilot

github的代码辅助工具，可以根据注释或上下文自动生成代码，目前支持了Agent代理模式，但是不太好用，目前还是主要使用Tab模式

工具
Auto filling Java call arguments

功能：调用函数时，alt+enter自动填充函数的形参


Alibaba Java Coding Guidelines

以阿里巴巴的Java代码规范校验，会自动检测代码不规范的地方


CamelCase

在 kebab-case、SNAKE_CASE、PascalCase、camelCase、snake_case 或 space case 之间轻松切换。请参阅编辑菜单或使用 ⇧ + ⌥ + U &#x2F; Shift + Alt + U。允许禁用某些转换或在首选项中更改它们的顺序。


jclasslib is a bytecode viewer

生成Java字节码文件


Key Promoter X

自动提示功能对应的快捷键


Maven Helper

方便的管理maven依赖，尤其是分析依赖注入冲突


Rainbow Brackets

彩虹括号


RestfulTookit-fix

restFul接口查找


Swith2Cursor

支持在cursor开发工具里打开当前的项目，从而使用Agent功能


POJO to JSON

将POJO转换成JSON，适合跟前端对接数据结构

学习
LeetCode Editor

同步并管理leetCode的问题


PDF Viewer

阅读PDF文件的插件，但是不能管理，没有页签


MetricsReload

分析代码复杂度，ps:没用过]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>plugin</tag>
        <tag>工具推荐</tag>
        <tag>开发效率</tag>
      </tags>
  </entry>
  <entry>
    <title>性能指标详解</title>
    <url>/2024/04/04/performance-index/</url>
    <content><![CDATA[简述在开发测试网站时，一般都有几个指标来衡量系统的性能，其中吞吐量、并发数、QPS、TPS、有效吞吐量、吞吐率、网络流量等指标，接下来就这几种指标简单聊聊。

吞吐量
引用维基百科的概念解释



Web系统在web系统中，吞吐量指单位时间内成功处理的请求数量，反应了系统的整体性能，高吞吐量意味着用户的体验更好，请求可以被更快速的处理和响应。
AI大模型训练

在大模型训练中，吞吐量指单位时间内可以处理多少个训练步骤或样本，

数据库

在数据库这样的存储系统中，吞吐量指可以接受和写入存储的数据量或读取并返回到请求系统中的数据量，通常以每秒字节数(Bps)为单位。

JVM

Java JVM中的Parallel Scavenge垃圾收集器，重点是关注的吞吐量，逻辑为：运行用户代码时间&#x2F;(运行用户代码时间+运行垃圾收集时间)


吞吐量和什么有关吞吐量一般和网络带宽有关，但是吞吐量必然低于带宽，最主要的还是和系统的性能有很大关系，一般低延迟的系统吞吐量必然也不低。
如何测试吞吐量

可以采用网络工具来检测，比如简单网络管理协议 （SNMP）、Windows Management Instrumentation （WMI）、tcpdump、Wireshark 等

参考

1.TeachTarget throughput
2.性能测试中吞吐量
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>性能</tag>
        <tag>指标</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年度读书清单</title>
    <url>/2023/05/07/2023Book/</url>
    <content><![CDATA[已读书单技术《网络是怎样链接的》[日] 户根勤
《Scrum精髓》Kenneth Rubin
《计算机是怎样跑起来的》[日] 矢泽久雄

文学《枪炮、病菌与钢铁》[美] 贾雷德·戴蒙德
《阿Q正传》鲁迅

理财《纳瓦尔宝典》[美] 埃里克·乔根森

历史《挑战古人100天》云葭

工具其他《一个广告人的自白》[美] 大卫·奥格威
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>读书笔记</tag>
        <tag>技术书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建指南</title>
    <url>/2022/11/20/hexo-setting/</url>
    <content><![CDATA[上一篇已经描述过了博客的技术选型，接下来就让我们来具体详解一下hexo的搭建之旅吧！
主题选择hexo支持丰富的主体插件选择，具体可以参考这里,也可以在GitHub上寻找相关主题(搜索hexo-theme)，这里我采用的是Next主题,github地址为https://github.com/iissnan/hexo-theme-next/，这个主题的受欢迎程度也是很高的，相较而言更简洁，当然也可以做自己的主题，不过这都是后话了，现在遵循拿来即用的原则。
开放评论这里主要还是基于第三方的评论系统，目前Next主题支持的有：

disqus

目前是很好用的一个评论系统，但是由于是墙外的应用，对于国内常规用户来说还是不太友好，暂时忍痛割爱了,不过可以看下效果图  


changyan

这是一个国内的平台,不知道为何，现在国内的好多应用都需要关注公众号，so不是太喜欢，贴个效果图感受一下  


valine

valine是基于leanCloud的无后端评论系统，所以：

  注册LeanCode账号
创建Valine应用
进入应用，点击设置>应用Keys获取appId,appKey
在主题配置文件_config.yml,这里的路径是next/_config.yml中找到valine然后配置上即可

优化
主要是优化valine在博客中的一些样式，比如去处掉Powered By，文本等，具体可以在主题的css目录下创建一个comment文件夹，放自己的自定义的样式，我这里是next&#x2F;source&#x2F;css&#x2F;_common下创建comment文件夹，再创建comment.styl样式文件，里面写优化的样式，写完之后要在main.styl引入才可生效
可以在主题中开启评论邮箱通知，自定义placeholder等




gitalk  首先要注册GitHub应用，https://github.com/settings/applications/new  注册完成之后，把Client ID和Client secrets填写到主题的_config.yml里面，gittalk对应的位置，开启即可
  gitalk:
    enable: true  #启用gitalk
    github_id:   #github帐号 例：CodeHaotian
    id: location.pathname  #此设置参照下文常见问题说明
    repo:   #存放评论的仓库名称
    client_id:   #application的id，即上文Client ID
    client_secret:  #application的密码，即上文Client Secret
    admin_user:  #页面显示联系**初始化评论 例：CodeHaotian
    distraction_free_mode: true # Facebook-like distraction free mode
    # Gitalk's display language depends on user's browser or system environment
    # If you want everyone visiting your site to see a uniform language, you can set a force language value
    # Available values: en | es-ES | fr | ru | zh-CN | zh-TW
    language: zh-CN
livere

来必力，一家韩国的评论系统，这里不多做阐述了，感兴趣的大家可以去看看，不过不是太推荐


rating


统计字数使用hexo-word-counter统计文章的字数以及预期阅读时间。完成配置后，可以在每篇文章开头和页面底部显示字数和阅读时间

安装

$ npm install hexo-word-counter
$ hexo clean

配置在主配置文件_config.yml尾部添加

symbols_count_time:
  symbols: true
  time: true
  total_symbols: true
  total_time: true
  exclude_codeblock: false
  awl: 4  # 平均字节长度，默认为4，cn≈2，en≈5，
  wpm: 275 # 每分钟阅读次数，默认为275，Slow≈200，Normal≈275，Fast≈350
  suffix: "mins."

站点运行时间打开\themes\next\layout\_partial\footer.swig,在最后位置添加一串js代码
&lt;div>
&lt;span id="timeDate">载入天数...&lt;/span>&lt;span id="times">载入时分秒...&lt;/span>
&lt;script>
    var now = new Date(); 
    function createtime() &#123; 
        var grt= new Date("2020/11/09 00:00:00");//在此处修改你的建站时间
        now.setTime(now.getTime()+250); 
        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); 
        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); 
        if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); 
        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; 
        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); 
        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; 
        document.getElementById("timeDate").innerHTML = "已运行 "+dnum+" 天 "; 
        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; 
    &#125; 
setInterval("createtime()",250);
&lt;/script>
&lt;/div>

总访问人数Next主题默认支持,修改&#x2F;theme&#x2F;next&#x2F;_config.yml中的busuanzi_count，改为true即可.这个只是很普通的显示总站的访问量和人数
推荐文章这里使用的是第三方的一款插件，具体预览效果可以看：

安装插件npm install hexo-recommended-posts --save
下载推荐文章列表在编辑完新的文章之后，使用如下命令获取推荐列表hexo recommend
自定义如果默认配置不满足需求，可以在hexo的根目录_config.yml里添加配置：recommended_posts:
  server: https://api.truelaurel.com #后端推荐服务器地址
  timeoutInMillis: 10000 #服务时长，超过此时长，则使用离线推荐模式
  internalLinks: 2 #内部文章数量
  externalLinks: 1 #外部文章数量
  fixedNumber: false
  autoDisplay: true #自动在文章底部显示推荐文章
  excludePattern: []
  titleHtml: &lt;h1>猜你喜欢&lt;span style="font-size:0.45em; color:gray">（由&lt;a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件&lt;/a>驱动）&lt;/span>&lt;/h1> #自定义标题
其中 excludePattern 可以添加想要被过滤的链接的正则表达式, 如配置为 [&quot;example.com&quot;], 则所有包含 example.com 的链接都会从推荐文章中过滤掉.

fixedNumber 字段用来控制是否返回固定数量的推荐文章, 如果默认推荐文章不够的话会填充当前文章的前后文章作为推荐文章.
阅读进度找到next主题的_config.yml找到reading_progress,把false改为true即可，默认是支持的
文章简介目前hexo不再支持老的auto_excerpt，所以现在我们引入新的插件

hexo-excerpt
安装  npm install hexo-excerpt --save
  打开hexo根目录的_config.yml添加如下配置  excerpt:
    depth: 2  #按层来算，也就是按代码块来算
    excerpt_excludes: []
    more_excludes: []
    hideWholePostExcerpts: true
  打开主题的配置文件/theme/next/_config.yml,将excerpt_description设置为true,read_more_btn设置为true  注：按代码块的显示可能有些不太友好，所以下面我们引入第二个插件


hexo-auto-excerpt
安装  npm install hexo-auto-excerpt --save
  安装完成后在hexo的根目录_config.yml下添加excerpt_length: 100即可，表示摘要的字数  注：这个会把文本块打乱，只是以文字显示在首页



性能优化待定
域名设置域名可以在freenom.com上面注册一个免费的前提需要有梯子,然后可以搜索自己的想要的域名，最高可以免费12个月哦，添加完之后有个配置forward url可以设置自己的GitHub page域名，这样访问注册的域名就可以跳转到GitHub page访问博客了。
SEO搜索
Google Search登录谷歌站点，添加自己的站点域名，然后选择TXT验证，完毕之后，添加个人站点地图

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客搭建之旅</title>
    <url>/2022/11/20/My-Blog-Journey/</url>
    <content><![CDATA[其实我萌生搭建自己的博客这个念头已经很久了，最初是在2018年的时候就有了，那会儿看了一个hexo搭建博客的例子就开始弄自己的blog,不过仅仅只是浅浅的照猫画虎了一番，是在自己的GitHub上搭建了一个demo，仅此而已，然后就是到了现在，才又把这个重新捡了起来(在此为我之前的半途而废而感惭愧:joy:)
咳咳，往事翻篇，现在我要认真的重新搞起我的blog啦！从零开始~
其实个人搭建博客的技术选型我在WordPress和Hexo之间有过徘徊，下面简单汇总了这两种方式搭建博客各自的特点。
WordPressWordPress(简称WP)是用PHP语言开发的一款免费开源的博客平台，目前是全球最流行的博客系统了，世界上约有43% 的网站都在使用WordPress，小到兴趣博客，大到新闻网站。so它也可以是一个CMS作为你的内容站。
特性：

功能强大、扩展性强插件众多
对SEO搜索引擎友好，收录快，排名靠前
主题众多
写东西方便，任意一台电脑、手机即可

具体的搭建步骤如下：

注册自己的WordPress账号
注册域名(国内有阿里云(万网)、新网、聚名网、江苏邦宁(中数)、Namesilo等)
创建VPS(需要购买)
域名解析
连接VPS
搭建WordPress
主题、插件等配置

HexoHexo是基于node.js git搭建的，所以需要有一定的极客属性，可以直接在GitHub pages平台上托管。
特性：

快速、简洁
支持MarkDown，后期也好迁移
DIY每个人都可以定义自己的blog

步骤：

本地搭建环境:

安装并配置node.js&gt;Win
安装git&gt;Win  Mac上推荐使用HomeBrew来安装管理


注册GitHub账号，并创建自己的xxx.github.io

创建仓库，并命名为xxx.github.io  
设置pages，按提示操作即可  


hexo操作

安装hexo, npm install -g hexo 如果是国内的话可以设置npm镜像源为https://npmmirror.com/
hexo初始化文章
hexo 绑定GitHub  在_config.xml下设置deploy为GitHub，repo为你自己的仓库地址
选择主题
开放评论
博客统计次数
站点运行时间
设置推荐文章
博客字数统计
文章阅读进度
文章简介
性能优化
域名设置
SEO搜索设置



但是综合考虑(主要是成本)之后选择了Hexo,毕竟身为一个技(穷)术宅(人)，还是选择免费的Hexo可玩儿性比较高，哈哈。
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>个人成长</tag>
        <tag>技术选型</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray</title>
    <url>/2022/11/14/v2Ray/</url>
    <content><![CDATA[v2ray使用简介官网：https://www.v2ray.comv2Ray（Project V）相对于Shadowsocks,支持更多协议 (Socks、HTTP、TLS、TCP、mKCP、WebSocket)，还有更为强大的路由功能，更像是个全能选手
服务器(VPS)购买这里我采用的是HostWinds，之前有选择购买搬瓦工，但是IP更换没有hostWinds方便，地址：https://clients.hostwinds.com/
当然，搬瓦工官方也出了自己搭建的v2Ray Just My Socks
安装输入下面的命令，然后按步骤操作
bash &lt;(curl -s -L https://git.io/v2ray.sh)


安装完成后，可以输入: v2Ray url 查看客户端需要配置的链接
BBR优化备注当前使用的配置来自于：https://github.com/233boy/v2ray
]]></content>
      <categories>
        <category>v2Ray</category>
      </categories>
      <tags>
        <tag>bridge</tag>
        <tag>梯子</tag>
      </tags>
  </entry>
  <entry>
    <title>My Book</title>
    <url>/2022/11/09/myBook/</url>
    <content><![CDATA[2022已读书单技术《MySQL是怎样运行的》小孩子 4919

文学《闪闪发光的人生》 [日]小川糸
《山茶文具店》[日] 小川糸
《人生十讲》 季羡林
理财《小狗钱钱》[德]博多·舍费尔


地理《这里是中国》星球研究所
《这里是中国2》星球研究所
心理《被讨厌的勇气》岸见一郎

历史《古代人的日常生活》讲历史的王老师

工具《如何阅读一本书》[美] 莫提默·J. 艾德勒 &#x2F; 查尔斯·范多伦

健康《癌症·真相》菠萝

其他《凡人修仙传》忘语
《躺平》[德] 贝恩德·布伦纳]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
</search>
